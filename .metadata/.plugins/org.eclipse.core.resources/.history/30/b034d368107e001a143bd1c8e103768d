package com.capgemini.librarymanagement.controller;

import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

import com.capgemini.librarymanagement.dto.AdminBean;
import com.capgemini.librarymanagement.dto.BookBean;
import com.capgemini.librarymanagement.dto.RequestBean;
import com.capgemini.librarymanagement.dto.StudentBean;
import com.capgemini.librarymanagement.dto.UserBean;
import com.capgemini.librarymanagement.exception.ValidationException;
import com.capgemini.librarymanagement.factory.AdminFactory;
import com.capgemini.librarymanagement.factory.StudentFactory;
import com.capgemini.librarymanagement.factory.UserFactory;
import com.capgemini.librarymanagement.service.AdminService;
import com.capgemini.librarymanagement.service.StudentService;
import com.capgemini.librarymanagement.service.UsersService;
import com.capgemini.librarymanagement.validation.ValidationAdminStudent;

public class Controller {
	public static void main(String[] args) {
		doReg();
	}
	public static void doReg() {

		boolean flag = false;

		int regId = 0; 
		String regName = null; 
		String regMobile = null;
		String regEmail = null;
		String regPassword = null;

		int regId1 = 0; 
		String regName1 = null; 
		String regMobile1 = null;
		String regEmail1 = null;
		String regPassword1 = null;

		int bookId = 0; 
		String bookAuthor = null; 
		String bookName = null;
		String bookCategory = null;
		String bookPublisherName = null;
		String bookIssuedate = null;
		String bookReturndate = null;

		ValidationAdminStudent validation = new ValidationAdminStudent();

		Scanner scanner = new Scanner(System.in);
		
				UsersService service = UserFactory.getUsersService();
				do{
					System.out.println("-----------------------------------");
					System.out.println("Press 1 to Register");
					System.out.println("Press 2 to Login");
					System.out.println("Press 3 to exit");
					System.out.println("-----------------------------------");
					int choice = scanner.nextInt();
					switch (choice) {
					case 1:
						do {
							try {
								System.out.println("Enter ID :");
								regId = scanner.nextInt();
								validation.validatedId(regId);
								flag = true;
							} catch (InputMismatchException e) {
								flag = false;
								System.err.println("Id should contains only digits");
							} catch (ValidationException e) {
								flag = false;
								System.err.println(e.getMessage());
							}
						} while (!flag);



						do {
							try {
								System.out.println("Enter Name :");
								regName = scanner.next();
								validation.validatedName(regName);
								flag = true;
							} catch (InputMismatchException e) {
								flag = false;
								System.err.println("Name should contains only Alphabates");
							} catch (ValidationException e) {
								flag = false;
								System.err.println(e.getMessage());
							}
						} while (!flag);



						do {
							try {
								System.out.println("Enter Mobile :");
								regMobile = scanner.next();
								validation.validatedMobile(regMobile);
								flag = true;
							} catch (InputMismatchException e) {
								flag = false;
								System.err.println("Mobile Number  should contains only numbers");
							} catch (ValidationException e) {
								flag = false;
								System.err.println(e.getMessage());
							}
						} while (!flag);



						do {
							try {
								System.out.println("Enter Email :");
								regEmail = scanner.next();
								validation.validatedEmail(regEmail);
								flag = true;
							} catch (InputMismatchException e) {
								flag = false;
								System.err.println("Email should be proper ");
							} catch (ValidationException e) {
								flag = false;
								System.err.println(e.getMessage());
							}
						} while (!flag);



						do {
							try {
								System.out.println("Enter Password :");
								regPassword = scanner.next();
								validation.validatedPassword(regPassword);
								flag = true;
							} catch (InputMismatchException e) {
								flag = false;
								System.err.println("Enter correct Password ");
							} catch (ValidationException e) {
								flag = false;
								System.err.println(e.getMessage());
							}
						} while (!flag);

						UserBean bean = new UserBean();
						bean.setId(regId);
						bean.setAname(regName);
						bean.setEmail(regEmail);
						bean.setPassword(regPassword);

						boolean check = service.register(bean);
						if(check) {
							System.out.println("Registered");
						} else {
							System.out.println("Email already exist");
						}	

						break;

					case 2:
						do {
							try {
								System.out.println("Enter Email :");
								regEmail = scanner.next();
								validation.validatedEmail(regEmail);
								flag = true;
							} catch (InputMismatchException e) {
								flag = false;
								System.err.println("Email should be proper ");
							} catch (ValidationException e) {
								flag = false;
								System.err.println(e.getMessage());
							}
						} while (!flag);



						do {
							try {
								System.out.println("Enter Password :");
								regPassword = scanner.next();
								validation.validatedPassword(regPassword);
								flag = true;
							} catch (InputMismatchException e) {
								flag = false;
								System.err.println("Enter correct Password ");
							} catch (ValidationException e) {
								flag = false;
								System.err.println(e.getMessage());
							}
						} while (!flag);

						try {
							UserBean authBean = service.auth(regEmail, regPassword);
							System.out.println("Logged in");

							do {
								System.out.println("-----------------------------------");
								System.out.println("Press 1 to Add Books");
								System.out.println("Press 2 to update");
								System.out.println("Press 3 to Search the Book by Author");
								System.out.println("Press 4 to Search the Book by Title");
								System.out.println("Press 5 to Search the Book by Category");
								System.out.println("Press 6 to remove the Books");
								System.out.println("Press 7 to Get the Book Id's");
								System.out.println("Press 8 to Get the All The Books ");
								System.out.println("Press 9 to Book Issue");
								System.out.println("Press 10 to Show Users");
								System.out.println("Press 11 to Show Requests");
								System.out.println("Press 12 Receive Returned Book");
								System.out.println("Press 13 to main");
								System.out.println("-----------------------------------");
								int choice1 = scanner.nextInt();
								switch (choice1) {
								case 1:

									do {
										try {
											System.out.println("Enter Book-ID :");
											bookId = scanner.nextInt();
											validation.validatedId(bookId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);

									do {
										try {
											System.out.println("Enter Book Name :");
											bookName = scanner.next();
											validation.validatedName(bookName);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Book-Name should contains only Alphabates");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);

									do {
										try {
											System.out.println("Enter Author :");
											bookAuthor = scanner.next();
											validation.validatedName(bookAuthor);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Author Name should contains only Alphabates");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);


									do {
										try {
											System.out.println("Enter Category :");
											bookCategory = scanner.next();
											validation.validatedName(bookCategory);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Book-Category should contains only Alphabates");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);


									do {
										try {
											System.out.println("Enter PublisherName :");
											bookPublisherName = scanner.next();
											validation.validatedName(bookPublisherName);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Book-PublisherName should contains only Alphabates");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);

									BookBean bean1 = new BookBean();
									bean1.setId(bookId);	
									bean1.setName(bookName);
									bean1.setCategory(bookCategory);
									bean1.setAuthor(bookAuthor);
									bean1.setPublishername(bookPublisherName);
									boolean check2 = service.addBook(bean1);
									if(check2) {
										System.out.println("Book Added");
									} else {
										System.out.println("Book already exist");
									}
									break;
								case 2:
									do {
										try {
											System.out.println("Enter Book-ID :");
											bookId = scanner.nextInt();
											validation.validatedId(bookId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);

									BookBean bean2 = new BookBean();
									bean2.setId(bookId);
									int updated = service.updateBook(bookId);
									if (updated != 0) {
										System.out.println("Book is updated");
									} else {
										System.out.println("Book is not updated");
									}
									break;
								case 3:
									do {
										try {
											System.out.println("Search the book by the Book_Author");
											bookAuthor = scanner.next();
											validation.validatedName(bookAuthor);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Author Name should contains only Alphabates");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									
									BookBean bean3 = new BookBean();
									bean3.setAuthor(bookAuthor);
									List<BookBean> bookauthor = service.searchBookByAuthor(bookAuthor);
									for (BookBean bookBean : bookauthor) {

										if (bookBean != null) {
											System.out.println("Book_Id is-->"+bookBean.getId());
											System.out.println("Book_Name is-->"+bookBean.getName());
											System.out.println("Book_Author is-->"+bookBean.getAuthor());
											System.out.println("Book_Category is-->"+bookBean.getCategory());
											System.out.println("Book_PublisherName is-->"+bookBean.getPublishername());
										} else {
											System.out.println("No books are available written by this author");
										}
									}
									break;
								case 4:
	
									do {
										try {
											System.out.println("  Search the book by the Book_Title :");
											bookName = scanner.next();
											validation.validatedName(bookName);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Book-Name should contains only Alphabates");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);

									BookBean bean4 = new BookBean();
									bean4.setAuthor(bookName);
									List<BookBean> booktitle = service.searchBookByTitle(bookName);
									for (BookBean bookBean : booktitle) {	
										if (bookBean != null) {
											System.out.println("-----------------------------------");
											System.out.println("Book_Id is-->"+bookBean.getId());
											System.out.println("Book_Name is-->"+bookBean.getName());
											System.out.println("Book_Author is-->"+bookBean.getAuthor());
											System.out.println("Book_Category is-->"+bookBean.getCategory());
											System.out.println("Book_PublisherName is-->"+bookBean.getPublishername());
										} else {
											System.out.println("No books are available with this title.");
										}
									}
									break;
								case 5:
									
									do {
										try {
											System.out.println("Search the book by the Book_Category :");
											bookId = scanner.nextInt();
											validation.validatedId(bookId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									BookBean bean5 = new BookBean();
									bean5.setId(bookId);
									List<BookBean> bookIds = service.searchBookById(bookId);
									for (BookBean bookBean : bookIds) {
										if (bookBean != null) {
											System.out.println("-----------------------------------");
											System.out.println("Book_Id is-->"+bookBean.getId());
											System.out.println("Book_Name is-->"+bookBean.getName());
											System.out.println("Book_Author is-->"+bookBean.getAuthor());
											System.out.println("Book_Category is-->"+bookBean.getCategory());
											System.out.println("Book_PublisherName is-->"+bookBean.getPublishername());
										} else {
											System.out.println("No books are available with this Id.");
										}
									}
									break;
								case 6:
									
									do {
										try {
											System.out.println("Enter the book_Id to delete :");
											bookId = scanner.nextInt();
											validation.validatedId(bookId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									
									int book_Id = scanner.nextInt();
									if (book_Id == 0) {
										System.out.println("Enter the Valid Book_Id");
									} else {
										BookBean bean6 = new BookBean();
										bean6.setId(book_Id);
										boolean remove = service.removeBook(book_Id);
										if (remove) {
											System.out.println("The Book is removed");
										} else {
											System.out.println("The Book is not removed");
										}
									}
									break;
								case 7:
									LinkedList<Integer> ids = service.getBookIds();
									for (Integer integer : ids) {

										if (integer != null) {
											System.out.println(integer);
										} else {
											System.out.println("No Books Ids are available");
										}
									}
									break;
								case 8:
									LinkedList<BookBean> info = service.getBooksInfo();
									for (BookBean bookBean : info) {

										if (bookBean != null) {
											System.out.println("-----------------------------------");
											System.out.println("Book_Id is-->"+bookBean.getId());
											System.out.println("Book_Name is-->"+bookBean.getName());
											System.out.println("Book_Author is-->"+bookBean.getAuthor());
											System.out.println("Book_Category is-->"+bookBean.getCategory());
											System.out.println("Book_PublisherName is-->"+bookBean.getPublishername());
										} else {
											System.out.println("Books info is not present");
										}
									}
									break;
								case 9:
									StudentBean userBean2 = new StudentBean();
									BookBean bookBean2 = new BookBean();
									do {
										try {
											System.out.println("Enter the book_Id to delete :");
											bookId = scanner.nextInt();
											validation.validatedId(bookId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									
									do {
										try {
											System.out.println("Enter the User_Id to delete :");
											regId = scanner.nextInt();
											validation.validatedId(regId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									
									bookBean2.setId(bookId);;
									userBean2.setId(regId);

									try {
										boolean isIssued = service.bookIssue(userBean2, bookBean2);
										if (isIssued) {
											System.out.println("Book Issued");
										} else {
											System.out.println("Book cannot be issued");
										}

									} catch (Exception e) {
										System.out.println("Invalid data request book cannot be issued");
									}
									break;
								case 10:
									try {
										System.out.println("Users of Library are :");
										System.out.println("-------------------------------");

										List<StudentBean> userInfos = service.showUsers();
										for (StudentBean infos : userInfos) {

											System.out.println("User id ---------- " + infos.getId());
											System.out.println("User Name -------- " + infos.getName());
											System.out.println("User Email------ " + infos.getEmail());
											System.out.println("User No Of Books Borrowed ------- " + infos.getBooksBorrowed());

										}
									} catch (Exception e) {
										System.out.println("no books present in library");
									}
									break;
								case 11:
									try {
										System.out.println("Requests for Books are :");
										System.out.println("-------------------------------");

										List<RequestBean> requestInfos = service.showRequests();
										for (RequestBean info1 : requestInfos) {

											System.out.println("Book id ---------- " + info1.getBookInfo().getId());
											System.out.println("Book Name -------- " + info1.getBookInfo().getAuthor());
											System.out.println("User id----------- " + info1.getStudentInfo().getId());
											System.out.println("User Name -------- " + info1.getStudentInfo().getName());
											System.out.println("Book Issued ------" + info1.isIssued());
											System.out.println("Book Returned------" + info1.isReturned());

										}
									} catch (Exception e) {
										System.out.println("no books present in library");
									}
									break;
								case 12:
									System.out.println("Receive Returned Book");
									System.out.println("-----------------------");
									do {
										try {
											System.out.println("Enter the User_Id to delete :");
											regId1 = scanner.nextInt();
											validation.validatedId(regId1);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);

									do {
										try {
											System.out.println("Enter the book_Id to delete :");
											bookId = scanner.nextInt();
											validation.validatedId(bookId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									
									StudentBean student = new StudentBean();
									BookBean book = new BookBean();
									student.setId(regId1);
									book.setId(bookId);
									boolean isReceive = service.isBookReceived(student, book);
									if(isReceive) {
										System.out.println(" Received Returned book");
									}else {
										System.out.println("Invalid ! Admin unable to receive");
									}
									break;
								case 13:
									do {
										try {
											System.out.println("Enter the book_Id :");
											bookId = scanner.nextInt();
											validation.validatedId(bookId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									
									BookBean bookBean = new BookBean();
									bookBean.setId(bookId);

									do {
										try {
											System.out.println("Enter the User_Id");
											regId = scanner.nextInt();
											validation.validatedId(regId);
											flag = true;
										} catch (InputMismatchException e) {
											flag = false;
											System.err.println("Id should contains only digits");
										} catch (ValidationException e) {
											flag = false;
											System.err.println(e.getMessage());
										}
									} while (!flag);
									StudentBean userBean = new StudentBean();
									userBean.setId(regId);


									try {
										RequestBean request = service.bookRequest(userBean, bookBean);
										System.out.println("Request placed to admin");
										System.out.println("-----------------------------------");
										System.out.println("User Id-----" + request.getStudentInfo().getId());
										System.out.println("User name---" + request.getStudentInfo().getName());
										System.out.println("Book Id-----" + request.getBookInfo().getId());
										System.out.println("Book Name---" + request.getBookInfo().getName());

									} catch (Exception e) {

										System.out.println("Enter valid data or Invalid Request");
									}
									break;
								case 14:
									doReg();
								default:
									System.out.println("Invalid Choice");
									break;
								}
							} while(true);
						} catch (Exception e) {
							System.out.println("Invalid Credentials");
						}

						break;
					default:
						System.out.println("Invalid Choice");
						break;
					}
				
				} while(true);
	
	}
}

